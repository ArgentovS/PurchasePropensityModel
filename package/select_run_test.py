import pandas as pd
from typing import NoReturn
from scipy import stats
import webbrowser


class SampleComparisonTest:
    """
    Класс для проверки отличия двух выборок статистическими тестами в зависимости от того:
    - являются ли выборки зависимы ли выборки друг от друга (флаг samples_dependency_flag вводится пользователем),
    - являются ли выборки нормальными (параметрическими) или хотя-бы одна из них ненормальная,
    - равны ли в выборках дисперсии (проверяется для параметрических выборок).

    Автор: Аргентов Сергей https://argentov.pro
    версия: 1.0.0.
    дата: 19.08.23.

    -------------------
    СХЕМА РАБОТЫ КЛАССА
    ____________________________________________
    При инициализации экземпляра класса задайте:
    1) две выборки 'df1' и 'df2' в форматах 'pandas.DateFrame', которые необходимо сравнить на статистически значимое отличие
    2) флаг 'samples_dependency_flag', показывающий являются ли выборки зависимыми (по умолчанию 'no_dependency')
       (данный флаг можно задать позже методом 'set_samples_dependency_flag')
    3) флаг 'print_console_flag', показывающий необходимо ли выводить данные о работе класса в консоль (по умолчанию False)
    ____________________________________________
    Алгоритм работы класса (схему можно получить методом 'show_algorithm_scheme'):
    1) класс проверит тестом Шапиро выборки на условие, что каждая из них нормальная (параметрическая);
    2) если обе выборки параметрические и независимые - класс проверит равенство их дисперсий методом "Левене";
     2.1) если дисперсии выборок из п.2) равны - класс сравнит их по методу "Т-критерий Стьдента";
     2.2) если дисперсии выборок из п.2) не равны - класс сравнит их по методу "Т-критерий Уэлча";
    3) если обе выборки параметрические и зависимые - класс сравнит их по методу "Парный Т-критерий";
    4) если хотя-бы одна из выборок не параметрическая и выборки зависимые - класс сравнит их по методу "Знаковый ранговый критерий Вилкоксона";
    5) если хотя-бы одна из выборок не параметрическая и выборки не зависимые - класс сравнит их по методу "ЗКритерий Мана-Уитни".
    ____________________________________________

    Визуализируемый в консоли результат работы метода 'select_run_test(self, df1, df2)' (работает в случае установки флага 'print_console_flag' = True):
    1) Вывод по проверке выборок на параметричность (включая значения p-value);
    2) Если выборки параметрические и независимыеВывод - вывод по проверке равенства дисперсий (включая значения p-value);
    3) Выбранный статистический тест для сравнения выборок на статистически значимое отличие;
    4) Вывод, основанный на выбранном статистическом тесте (включая значения p-value).

    Возщвращаемый результат работы метода 'select_run_test(self, df1, df2)' - словарь со следующими ключами:
                                             'Условие зависимости выборок': признак зависимости выборок
                                             'Предпроверка 1': название и результат тестирования выборок на параметричность,
                                             'Предпроверка 2': (при необходимости) название и результат тестирования равенства дисперсий выборок,
                                             'Результат': название и результат выбранного теста статистической значимости раличия выборок.
    ---------------------------------------------

    """

    # Метод инициализации экземпляра класса
    def __init__(self, samples_dependency_flag: str = 'no_dependency', print_console_flag: bool = False):
        self.set_samples_dependency_flag(samples_dependency_flag)  # пользователь задаёт зависимость выборок в методе set_samples_dependency_flag(samples_dependency_flag)
        self.print_console_flag = print_console_flag  # пользователь задаёт условие - песатать ли дванные о процессе работы класса в консоль

        self.__df1: pd.DataFrame = pd.DataFrame()  # инициализация первого пустого датафрейма, которые пользователь задаст в методе select_run_test(self, df1, df2)
        self.__df2: pd.DataFrame = pd.DataFrame()  # инициализация первого пустого датафрейма, которые пользователь задаст в методе select_run_test(self, df1, df2)

        self.__name_test: str = ''  # инициализация внутренней перменной класса для сохранения имени выбранного теста сравнения двух выборок
        self.__p_value: float = 0.0  # инициализация внутренней переменной класса для сохранения значения p-value теста сравнения двух выборок

        self.__pv_shapiro_1: float = 0.0  # инициализация внутренней переменной класса для сохранения значения p-value теста Шапиро для первой выборки
        self.__pv_shapiro_2: float = 0.0  # инициализация внутренней переменной класса для сохранения значения p-value теста Шапиро для второй выборки
        self.__pv_levene: float = 0.0  # инициализация внутренней переменной класса для сохранения значения p-value теста Левене

        self.__result: dict = {}  # инициализация словаря, в котром отображаются промежуточные и итоговые результаты тестирования

        self.__url_scheme: str = 'https://disk.yandex.ru/i/AkzgHpuHMZg3EQ'  # инициализация URL изображения схемы алгоритма выбора статистического теста

    # Метод проверки корректности ввода пользователем флага зависимости выборок
    def set_samples_dependency_flag(self, samples_dependency_flag: str = 'no_dependency') -> NoReturn:
        """
        Метод проверяет корректность ввода флага, с помощью которого пользователь указывает -
        зависимы ли тестируемые выборки (то есть получены ли они на одних и техже тестируемых объектах)
        Параметры: samples_dependency_flag: вводимое пользователем значением из доступных ['dependency', 'no_dependency']
        Выходные параметры: None (устанавливается внутренняя переменная или выдаётся сообщение об ошибке)
        """
        def raise__info() -> NoReturn:
            """
            Функция выводит сообщение об ошибки ввода пользователем значения флага зависимости тестируемых выборок
            и справочную информацию о возможных значениях флага.
            Параметры: None
            Выходные параметры: None
            """
            raise ValueError\
                            (f'\nОШИБКА! Для экземпляра {self.__class__} пользователем '
                             f'введено некорректное значение параметра-флага "samples_dependency_flag"\n'
                             f'        Введённое пользователем значение параметра-флага '
                             f'зависимости выборок должно быть одним из двух:\n'
                             f'           - "dependency" для зависимых выборок\n'
                             f'           - "no_dependency" для независимых выборок (установлено по умолчанию)')

        if samples_dependency_flag in ['dependency', 'no_dependency']:
            self.__samples_dependency_flag = samples_dependency_flag
        else:
            raise__info()

    # Метод проверки выборок на параметричность: каждая ли параметрическая или не каждая
    def check_sample_parametricity_flag(self) -> bool:
        """
            Метод проверки двух выборок на распределение по нормальному закону
            Параметры: df_1(DataFrame): первая проверяемая выборка
                       df_2(DataFrame): вторая проверяемая выборка
            Выходные параметры (bool): совокупный результат оценки - все ли выборки параметрические
        """

        # Функция вывода в консоль информации о результатах тестирования выборок на параметричность
        def print_shapiro(message) -> NoReturn:
            print(f'\n=================================================================\n'
                  f' Проверка каждой выборки на прараметричность тестом Шапира-Уилка\n'
                  f'=================================================================\n'
                  f' ЗНАЧЕНИЯ p-value ВЫБОРОК\n'
                  f'  - первая выборка: {self.__pv_shapiro_1 * 100:.6f}%\n'
                  f'  - вторая выборка: {self.__pv_shapiro_2 * 100:.6f}%\n'
                  f'--------------------------------------')
            print(message)

        self.__pv_shapiro_1 = stats.shapiro(self.__df1).pvalue
        self.__pv_shapiro_2 = stats.shapiro(self.__df2).pvalue
        self.__result['Предпроверка 1'] = {'name_test': 'Тест Шапиро', 'p-value df1': self.__pv_shapiro_1, 'p-value df2': self.__pv_shapiro_2}

        if self.__pv_shapiro_1 >= 0.05 and self.__pv_shapiro_2 >= 0.05:
            if self.print_console_flag:
                print_shapiro(' ВЫВОД: Все выборки ПАРАМЕТРИЧЕСКИЕ '
                              '(распеределены по нормальному закону распределения)')
            return True
        else:
            if self.print_console_flag:
                print_shapiro(' ВЫВОД: Одна или все выборки НЕПАРАМЕТРИЧЕСКИЕ '
                              '(не распеределены по нормальному закону распределения)')
            return False

    # Метод проверки равенства дисперсий двух параметрических выборок
    def check_equality_sample_variances_flag(self) -> bool:
        """
            Метод проверки двух параметрических выборок на равенство дисперсии
            Параметры: df1(DataFrame): первая проверяемая выборка
                       df2(DataFrame): вторая проверяемая выборка
            Выходные параметры (bool): совокупный результат оценки - равны ли дисперсии параметрических выборок
        """

        # Функция вывода в консоль информации о результатах тестирования выборок на равенство дисперсий
        def print_levene(message) -> NoReturn:
            print(f'\n====================================================\n'
                  f' Проверка равенства Дисперсий выборок тестом Левене\n'
                  f'====================================================\n'
                  f' ЗНАЧЕНИЕ p-value: {self.__pv_levene * 100:.6f}%\n'
                  f'--------------------------------------')
            print(message)

        self.__pv_levene = stats.levene(self.__df1, self.__df2).pvalue
        self.__result['Предпроверка 2'] = {'name_test': 'Тест Левене', 'p-value': self.__pv_levene}

        if self.__pv_levene >= 0.05:
            if self.print_console_flag:
                print_levene(' ВЫВОД: Дисперсии выборок - РАВНЫЕ')
            return True
        else:
            if self.print_console_flag:
                print_levene('ВЫВОД: Дисперсии выборок - НЕРАВНЫЕ')
            return False

    # Метод выбора и запуска теста выборок на наличие статистического различия
    def select_run_test(self, df1, df2) -> dict:
        """
            Метод выбора статистического теста для сравнения двух выборок на наличие
            статистически значимого различия с учётом параметричности выборок и равенства их дисперсий
            Параметры: df1(DataFrame): первая проверяемая выборка
                       df2(DataFrame): вторая проверяемая выборка
            Выходные параметры p_value(dict): словарь, содержащий данные этапов выбора теста и его результат в формате (пример):
                                             {
                                             'Условие зависимости выборок': 'no_dependency',
                                             'Предпроверка 1':
                                                             {
                                                                'name_test': 'Тест Шапиро',
                                                                'p-value df1': 0.4429227113723755,
                                                                'p-value df2': 0.18485476076602936
                                                              },
                                             'Предпроверка 2'(записывается только в случае проверки равенства дисперсий выборок):
                                                             {
                                                                'name_test': 'Тест Левене',
                                                                'p-value': 0.9096422555342916
                                                             },
                                             'Результат':
                                                            {
                                                                'name_test': 'Т-критерий Стьюдента',
                                                                'p-value': 0.3010849769215342
                                                            }
                                            }


        """

        # Функция вывода в консоль информации о результатах тестирования выборок на наличия в них статистически значимой разницы
        def print_conclusion() -> NoReturn:
            def get_conclusion():
                if self.__p_value >= 0.05:
                    return 'выборки статистически значимо НЕ ИМЕЮТ РАЗНИЦЫ (гипотеза H0)'
                else:
                    return 'выборки статистически значимо РАЗЛИЧАЮТСЯ (гипотеза H1)'

            print(f'\n\n=================================================================================\n'
                  f'  Для сравнения выборок выбран тест: {self.__name_test}'
                  f'\n=================================================================================\n'
                  f' ЗНАЧЕНИЕ p-value при тестировании выборок: {self.__p_value * 100:.6f}%\n'
                  f'-------------------------------------------------------\n'
                  f' ВЫВОД: {get_conclusion()}')

        self.__df1 = df1
        self.__df2 = df2

        if self.__samples_dependency_flag == 'dependency':
            self.__result['Условие зависимости выборок'] = 'dependency'
            if self.print_console_flag:
                print('\nПользователь задал условие - выборки ЗАВИСИМЫЕ')
            if self.check_sample_parametricity_flag():
                self.__name_test = 'Парный Т-критерий Уэлча'
                self.__p_value = stats.ttest_rel(self.__df1, self.__df2).pvalue
            else:
                self.__name_test = 'Знаковый ранговый критерий Вилсона'
                self.__p_value = stats.wilcoxon(self.__df1, self.__df2).pvalue
        else:
            self.__result['Условие зависимости выборок'] = 'no_dependency'
            if self.print_console_flag:
                print('\nПользователь задал условие - выборки НЕЗАВИСИМЫЕ')
            if self.check_sample_parametricity_flag():
                if self.check_equality_sample_variances_flag():
                    self.__name_test = 'Т-критерий Стьюдента'
                    self.__p_value = stats.ttest_ind(self.__df1, self.__df2, equal_var=True).pvalue
                else:
                    self.__name_test = 'Т-критерий Уэлча'
                    self.__p_value = stats.ttest_ind(self.__df1, self.__df2, equal_var=False).pvalue
            else:
                self.__name_test = 'Критерий Мана-Уитни'
                self.__p_value = stats.mannwhitneyu(self.__df1, self.__df2).pvalue
        if self.print_console_flag:
            print_conclusion()
        self.__result['Результат'] = {'name_test': self.__name_test, 'p-value': self.__p_value}
        return self.__result

    # Метод выбора и запуска теста выборок на наличие статистического различия
    def show_algorithm_scheme(self) -> NoReturn:
        """
            Метод запускает браузер и открывает в нём графическую схему алгоритма выбора статистического теста,
            которым выполнено сравнение двух выборок на наличие в них статистически значимого различия
        """
        webbrowser.open(self.__url_scheme, new=1, autoraise=True)
